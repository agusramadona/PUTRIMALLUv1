<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="mainTimer.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>36</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHiAAAAEAIACoDwAAFgAAACgAAAAeAAAAQAAAAAEAIAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAA
        AACMyNYApt7pGHWdp39deYDFVm9111ZvdddWbnXXVm5111ZudddWb3XXVm911115gMZ3n6l7Z4aMUUdc
        Y31MTUJOR2Nxf0NxjsZBeaDsQH2o+0B9qfxBeqPxQ3SV1EVpf6FJWl5aUEAqGk1KPSpNSTopVioKBVMy
        EgC5//8PYoGIpTE5O/4kJSX/IyMj/yUlJv8oKyz/KCss/ygrLP8lJyf/IyMj/yQlJf8xODn7VXeF9U6H
        q/1CdZfwPYzJ/TuS1f87k9n/O5Ta/zuU2v87lNn/O5LX/zyP0P8+h773QnWYzkVpfdlAfaniRmZ3gVI4
        FAuGtsJQOURH9CAfH/8iIiL/ISAg/zY/Qv+Dsr7/jL7L/4q8yf9HWV7/IB8f/yIiIv8hICD/KS0u/1h7
        iv9BjMT/O5Ta/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87lNr/PI/Q/0J3nf87k9j/PoW69Ulc
        YV92nqh1LzQ2/iEhIf8iIiL/ISEh/ywxMv+TydT/sPT//6jo9f9DVFf/IB8f/yIiIv8iIiL/ISAf/0xn
        cv9Fl9T/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9j/PI7O/0Nzk/87ktX/PJDS/0Vr
        g6h1nKZ5LjQ1/yEhIf8iIiL/IiIi/yIiIv90m6X/r/P//5vV5P8zOz3/ISAg/yIiIv8iIiL/ISAf/0pq
        ev9Em9z/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9n/PY3L/0Ruif87kdX/O5PX/0N0
        ltV1nKd5LjQ1/yEhIf8iIiL/IiIi/yAeHv9Zc3r/rvH//4/D0P8qLS7/IiEh/yIiIv8iIiL/ISAf/0pr
        fP9Em93/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9n/PYzJ/0Vrg/87kdT/O5TZ/0F7
        pPB1nKd5LjQ1/yEhIf8iIiL/IiEh/ycqKv9/rLf/rvH//6Lg7/9EVFj/IB8f/yIiIv8iIiL/ISAf/0pr
        fP9Em93/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9n/PY3K/0Vrg/88kdP/O5Ta/0B+
        qv11nKd5LjQ1/yEhIf8iIiL/ISEh/y0zNP+VzNj/r/P//63w/v9Wb3X/IB8e/yIiIv8iIiL/ISAf/0pr
        fP9Em93/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9j/PJDR/0J3m/87kdT/O5Ta/0F9
        qPlui4+VLjQ1/yEhIf8iIiL/IiIi/yIiIv9VbnT/kcXT/3yos/8xODr/ISEh/yIiIv8iIiL/ISAf/0pr
        fP9Em93/OpPY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zuT2P87k9j/O5PY/zyQ0/87k9j/O5PY/0J1
        mNppeXLULTEz/yAfH/8hISD/IB8f/yAfH/8gHx//KCwt/yQlJv8fHh7/IB8f/yAfH/8hISH/Hx0c/0lp
        ev9Em93/OpPY/zuT2P87k9j/O5PY/zuU2f87lNn/O5PY/zuT2P87k9j/O5PY/zuT2f87lNr/PYrE/Edj
        cIR4gXL0U2Ji/zc/Qf80Oz3/SlVV/0lUU/9JVFP/SFNS/0lUU/9JVFP/SVRT/0RPUP8sMTP/QU1P/1qE
        l/9Em97/O5Ta/zuT2P87k9n/OI/T/zeIy/83i87/OpLY/zuT2P87k9n/O5Ta/zyR0v8+hLn3RWuCnU9B
        KBWDcUn9mY1l/2RybP9ZZ2X/mI9p/5WGW/+Vhlz/lYZc/5WGXP+Vhlz/loZb/4iOef9CUFP/cn50/0Rd
        bP88bZH/PYG1/zyQ0v85hMX/VYW5/3KVwv9njr3/P4G9/zqR1/89jMn/PHSe/zVVcP0zQU1/Xz4XCU1H
        MgCAZzr2l3xI/2dxZv9RXVv/loNV/5R1P/+UdkD/lHZA/5R2QP+UdkD/lXdA/4GCav9BTlD/g35i/zA7
        Sv8iPVr/K0Vc/zNYeP9oi7j/mLDX/5St1f+btNr/epjD/zhnkP8zUmr/JkBa/xwyT90PFjEhEBkzAAAA
        AAB7ZDnblnpF/3d+bP9BTlD/kopm/5R2P/+Ud0L/lHdC/5R3Qv+UdkH/mH5L/2x2av9NW1r/koNa/z9E
        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
        //zwA//8+Af//A==
</value>
  </data>
</root>